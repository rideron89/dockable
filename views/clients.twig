<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <title>Dockable - Clients</title>

    <style>
        * {
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            box-sizing: border-box;
            font-kerning: auto;
            text-rendering: optimizeLegibility;
        }

        html {
            font-family: Nunito, Helvetica, sans-serif;
            -webkit-text-size-adjust: 100%;
        }

        body: {
            margin: 0;
        }

        input {
            box-shadow: inset 1px 1px 2px #f5f5f5;
            border: 1px solid #bababa;
            font: inherit;
            padding: 0 6px;
            line-height: 2.2em;
            width: 100%;
        }

        input:active,
        input:focus {
            border-color: #4343fe;
        }

        button {
            border: 1px solid #aaa;
            border-radius: 0;
            font: inherit;
            padding: 8px 10px;
            line-height: 1;
        }

        hr {
            border: 0;
            height: 4px;
            border-radius: 2px;
            background: #ddd;
            margin: 1.3em 0;
        }

        label {
            display: block;
            font-weight: 700;
        }

        form {
            display: block;
        }

        form fieldset {
            border: 0;
            display: block;
            margin: 0;
            padding: 0 0 5px;
        }

        form fieldset + fieldset {
            padding-top: 5px;
        }

        .secret {
            display: block;
            margin-top: 3px;
            padding: 0 6px;
            line-height: 2.2em;
            background: #eaeaea;
            border: 1px solid #bababa;
        }
    </style>
</head>
<body>

    <h1>Dockable - Clients</h1>

    <a href="/">Home</a>
    
    <button id="logout" type="button">Logout</button>

    <hr />

    <section>
        <h3>Your Clients</h3>

        {% for client in clients %}
            <div>
                <form>
                    <fieldset>
                        <label for="client-name-{{ client._id }}">Name</label>
                        <input id="client-name-{{ client._id }}" type="text" value="{{ client.name }}" />
                    </fieldset>

                    <fieldset>
                        <label>Secret</label>
                        <span class="secret">{{ client.secret }}</span>
                    </fieldset>

                    <div id="message-{{ client._id }}"></div>

                    <fieldset>
                        <button class="updateButton" type="button" data-client-id="{{ client._id }}">Update</button>
                        <button class="resetButton" type="button" data-client-id="{{ client._id }}">Reset</button>
                        <button class="deleteButton" type="button" data-client-id="{{ client._id }}">Delete</button>
                    </fieldset>
                </form>
            </div>
        {% endfor %}
    </section>

    <hr />

    <section>
        <h3>Add a Client</h3>

        <form id="add-client-form">
            <fieldset>
                <label for="new-name">Name</label>
                <input id="new-name" type="text" />
            </fieldset>

            <div id="new-client-message"></div>

            <button type="submit">Add</button>
        </form>
    </section>

    <script src="https://unpkg.com/axios@0.17.1/dist/axios.min.js"></script>
    <script>
        function getCookies() {
            let rawCookie = document.cookie;
            let cookies = {};

            rawCookie.split('; ').map(function(rawCookie) {
                let cookie = rawCookie.split('=');

                cookies[cookie[0]] = decodeURIComponent(cookie[1]);
            });

            return cookies;
        }

        // reset buttons
        Array.prototype.slice.call(document.querySelectorAll('.resetButton')).map(function(el) {
            el.addEventListener('click', function(ev) {
                ev.preventDefault();

                let clientId = ev.target.dataset.clientId;
                let params = new URLSearchParams();

                let cookies = getCookies();
                let creds = { ...cookies.login.split(':') };
                let auth = { username: creds[0], password: creds[1] };

                params.append('id', clientId);

                axios.post('/oauth/reset-client', params, { auth : auth })
                .then(function(response) {
                    window.location.href = window.location.href;
                })
                .catch(function(err) {
                    document.querySelector('#message-' + clientId).innerHTML = err;
                    console.warn(err);
                });
            });
        });

        // delete buttons
        Array.prototype.slice.call(document.querySelectorAll('.deleteButton')).map(function(el) {
            el.addEventListener('click', function(ev) {
                ev.preventDefault();

                let clientId = ev.target.dataset.clientId;
                let params = new URLSearchParams();

                let cookies = getCookies();
                let creds = { ...cookies.login.split(':') };

                params.append('id', clientId);

                axios.post('/oauth/unregister', params, { auth: { username: creds[0], password: creds[1] } })
                .then(function(response) {
                    window.location.href = window.location.href;
                })
                .catch(function(err) {
                    document.querySelector('#message-' + clientId).innerHTML = err;
                });
            });
        });

        // update buttons
        Array.prototype.slice.call(document.querySelectorAll('.updateButton')).map(function(el) {
            el.addEventListener('click', function(ev) {
                ev.preventDefault();

                let clientId = ev.target.dataset.clientId;
                let form = ev.target.parentNode.parentNode;
                let params = new URLSearchParams();

                let cookies = getCookies();
                let creds = { ...cookies.login.split(':') };

                params.append('id', clientId);
                params.append('name', form.querySelector('#client-name-' + clientId).value);

                axios.put('/oauth/update-client', params, { auth: { username: creds[0], password: creds[1] } })
                .then(function(response) {
                    window.location.href = window.location.href;
                })
                .catch(function(error) {
                    document.querySelector('#message-' + clientId).innerHTML = error;
                });
            });
        });

        // logout button
        document.querySelector('#logout').addEventListener('click', function(ev) {
            ev.preventDefault();

            axios('/api/logout').then(function(response) {
                window.location.href = window.location.href;
            });
        });

        // add client button
        document.querySelector('#add-client-form').addEventListener('submit', function(ev) {
            ev.preventDefault();

            let cookies = getCookies();
            let params = new URLSearchParams();

            let creds = { ...cookies.login.split(':') };

            let name = ev.target.querySelector('#new-name').value;

            params.append('name', name);

            axios.post('/oauth/register', params, { auth: { username: creds[0], password: creds[1] } })
            .then(function(response) {
                window.location.href = window.location.href;
            })
            .catch(function(error) {
                ev.target.querySelector('#new-client-message').innerHTML = error.response.data;
            });
        });
    </script>
</body>
</html>
